{"version":3,"file":"_check.js","sources":["../../../../common/src/validate/_check.js"],"sourcesContent":["import Ajv2019 from \"ajv/dist/2019\";\nimport ERROR_PARAMS from \"./_ERROR_PARAMS\";\n\nconst TOP_FIELD = \"all\";\nconst isProd = import.meta.env.MODE === \"production\";\n\nexport default async function (data, ignore_list = []) {\n  let validated_errors = {};\n  try {\n    let validate = this;\n    if (validate.$async) {\n      await validate(data);\n    } else {\n      let valid = validate(data);\n      if (!valid) {\n        throw new Ajv2019.ValidationError(validate.errors);\n      }\n    }\n  } catch (invalid_errors) {\n    if (invalid_errors instanceof Ajv2019.ValidationError) {\n      validated_errors = _init_errors(invalid_errors.errors);\n    } else {\n      throw invalid_errors;\n    }\n  }\n  ignore_list = [...new Set(ignore_list).add(\"_old\")];\n  return _parseErrorsToForm(validated_errors, data, ignore_list);\n}\n//  將校驗錯誤初始化為\n//  {\n//    all: { [keyword]: { list, message } },\n//    [property]: [ { [keyword], [message] }, ... ], ...\n//  }\nfunction _init_errors(invalid_errors) {\n  !isProd && console.log(\"@整理前的validateErrors => \", invalid_errors);\n\n  let acc = { [TOP_FIELD]: [] };\n  let res = invalid_errors.reduce((acc, invalid_error) => {\n    let {\n      //  原生狀況：顯示發生錯誤的keyword\n      //  \"errorMessage\"：代表此校驗錯誤是ajv-errors預先設定的，而原生keyword能在paramsItem找到\n      //  \"myKeyword\"：自訂義keyword\n      keyword,\n      //  依據keyword，params有不同內容\n      //  \"errorMessage\"：代表此校驗錯誤是ajv-errors預先設定的，params內容為原生錯誤\n      //  \"myKeyword\"：自訂義keyword所設計的params，\n      ////  paramsItem { keyword: 自訂義keyword, params: { 自訂義的params-kvpairs } }\n      params,\n      //  JSON Pointer：代表被校驗的資料為主體，實際發生錯誤的位置(ex: \"/email\")\n      //  \"\"：代表指向的錯誤位置，高過於被校驗的資料的級別(ex: schema.if)\n      //  無論是否自訂義keyword，都是自動生成\n      instancePath,\n      //  依據keyword，params有不同內容\n      //  原生狀況：錯誤提醒\n      //  \"errorMessage\"：ajv-errors預先設定的錯誤提醒\n      //  \"myKeyword\"：自訂義keyword的校驗函數設定錯誤提醒\n      message,\n    } = invalid_error;\n\n    if (![\"errorMessage\", \"myKeyword\"].some((item) => item === keyword)) {\n      console.warn(`keyword「${keyword}」沒有設置錯誤訊息，請檢查！`);\n      return acc;\n    }\n    let { errors } = params;\n    // JSON Pointer 級別高過於被校驗資料的錯誤\n    if (!instancePath) {\n      errors.reduce((_acc, error) => {\n        let { keyword: origin_keyword, params: origin_params } = error;\n        let paramKey = ERROR_PARAMS[origin_keyword];\n        let field_name = origin_params[paramKey];\n        let item = _acc.find(({ keyword }) => keyword === origin_keyword);\n        if (!item) {\n          _acc.push({ keyword: origin_keyword, list: [field_name], message });\n        } else {\n          item.list.push(field_name);\n        }\n        return _acc;\n      }, acc[TOP_FIELD]);\n      return acc;\n    }\n    // JSON Pointer 級別與被校驗資料相同&以下的錯誤\n    //  { [field_name]: [{ keyword, message }, ...], ... }\n    let { keyword: origin_keyword } = errors[0];\n    let field_name = instancePath.split(\"/\").pop();\n    if (!acc[field_name]) {\n      acc[field_name] = [];\n    }\n    ////  忽略掉重複性的keyword(錯誤)，通常會因為如allOf設定的條件，指定一個property重複的keyword而發生\n    if (!acc[field_name].some(({ keyword }) => keyword === origin_keyword)) {\n      acc[field_name].push({ keyword: origin_keyword, message });\n    }\n    return acc;\n  }, acc);\n  !isProd && console.log(\"@整理後的validateErrors => \", res);\n  return res;\n}\n//  將轉化後的校驗錯誤再轉化為\n//  [\n//    { field_name, valid: boolean, <message|value>, }, ...\n//  ]\nfunction _parseErrorsToForm(invalid_errors, data, ignore_list = []) {\n  //  先將傳入的 data properties 皆視為 valid，待會進行過濾\n  let valid_list = Object.keys(data);\n  let res_list = [];\n  res_list.valid = !Object.getOwnPropertyNames(invalid_errors).length;\n  if (!res_list.valid) {\n    for (let error of invalid_errors[TOP_FIELD]) {\n      // JSON Pointer 級別高過於被校驗資料的錯誤\n      let { keyword, message, list } = error;\n      for (let field_name of list) {\n        if (!invalid_errors[field_name] || !invalid_errors[field_name].top) {\n          ////  覆蓋掉同級以下的錯誤資訊\n          invalid_errors[field_name] = {\n            message,\n            top: true,\n            keyword: [keyword],\n          };\n        } else {\n          invalid_errors[field_name].message += `,${message}`;\n          invalid_errors[field_name].keyword.push(keyword);\n        }\n      }\n    }\n    delete invalid_errors[TOP_FIELD];\n    //  過濾校驗錯誤field\n    for (let field_name in invalid_errors) {\n      valid_list = valid_list.filter((item) => item !== field_name);\n    }\n  }\n  //  從 invalid_errors 與 valid_list 過濾掉 ignore_list\n  for (let field_name of ignore_list) {\n    valid_list = valid_list.filter((item) => item !== field_name);\n    delete invalid_errors[field_name];\n  }\n\n  //  從 valid_errors 整理出校驗錯誤的各別結果給 res_list\n  for (let field_name in invalid_errors) {\n    let field_error = invalid_errors[field_name];\n    // JSON Pointer 級別高過於被校驗資料的錯誤\n    let keyword_and_message;\n    if (field_error.top) {\n      keyword_and_message = {\n        message: (field_error.message += \"。\"),\n        keyword: field_error.keyword,\n      };\n    } else {\n      // JSON Pointer 級別與被校驗資料相同&以下的錯誤\n      keyword_and_message = field_error.reduce(\n        (acc, { message, keyword }, index) => {\n          acc.keyword.push(keyword);\n          if (!index) {\n            acc.message = message;\n            return acc;\n          }\n          acc.message += `,${message}`;\n          if (index === field_error.length - 1) {\n            acc.message += \"。\";\n          }\n          return acc;\n        },\n        { keyword: [], message: \"\" }\n      );\n    }\n    let item = {\n      field_name,\n      value: data[field_name],\n      valid: false,\n      ...keyword_and_message,\n    };\n    res_list.push(item);\n  }\n\n  for (let field_name of valid_list) {\n    res_list.push({ field_name, valid: true, value: data[field_name] });\n  }\n  !isProd && console.log(\"整理後的驗證結果 res_list => \", res_list);\n  return res_list;\n}\n"],"names":["Ajv2019","acc","origin_keyword","ERROR_PARAMS","field_name","keyword"],"mappings":"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"}